---
import type { CollectionEntry } from "astro:content";
import Layout from "./Layout.astro";
import { formatDate } from "../date";
import { Icon } from "astro-icon/components";

interface Props {
  post: CollectionEntry<"posts">;
}

const { post } = Astro.props;
const {
  data: { title, tags, description, publishDate, isPaper } = {
    title: "",
    tags: [],
    description: "",
    publishDate: "",
    isPaper: false,
  },
  slug,
} = post || {};

const date = new Date(publishDate);
const datetime = date.toISOString();
const postDate = formatDate(date);
const imgUrl = new URL(`/open-graph/${slug}.png`, Astro.url).href;
const { remarkPluginFrontmatter } = await post.render();
---

<script lang="ts" is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const prevBtn = document.querySelector(".prev-btn");
    const nextBtn = document.querySelector(".next-btn");
    const container = document.querySelector(".tag-container");
    const wrapper = document.querySelector(".tag-container-wrapper");
    const items = document.querySelectorAll(".tag-item");

    if (!prevBtn || !nextBtn || !container || !wrapper || items.length === 0)
      return;

    let position = 0;

    // Get actual total width of container
    const getContainerWidth = () => {
      let totalWidth = 0;
      items.forEach((item) => {
        const itemRect = item.getBoundingClientRect();
        totalWidth += itemRect.width + 8; // width + right margin (0.5rem)
      });
      return totalWidth;
    };

    // Calculate visible width dynamically based on wrapper width
    const getVisibleWidth = () => wrapper.clientWidth;

    const getMaxPosition = () => {
      const containerWidth = getContainerWidth();
      const visibleWidth = getVisibleWidth();
      return Math.max(0, containerWidth - visibleWidth);
    };

    let maxPosition = getMaxPosition();

    // Calculate average item width for navigation jumps
    const getAvgItemWidth = () => {
      if (items.length === 0) return 100;
      return getContainerWidth() / items.length;
    };

    // Update on window resize
    window.addEventListener("resize", () => {
      maxPosition = getMaxPosition();
      // Ensure position is still valid after resize
      position = Math.min(position, maxPosition);
      container.style.transform = `translateX(-${position}px)`;
      updateButtonState();
    });

    prevBtn.addEventListener("click", () => {
      const avgItemWidth = getAvgItemWidth();
      position = Math.max(position - avgItemWidth * 2, 0);
      container.style.transform = `translateX(-${position}px)`;
      updateButtonState();
    });

    nextBtn.addEventListener("click", () => {
      const avgItemWidth = getAvgItemWidth();
      position = Math.min(position + avgItemWidth * 2, maxPosition);
      container.style.transform = `translateX(-${position}px)`;
      updateButtonState();
    });

    function updateButtonState() {
      if (prevBtn && nextBtn) {
        prevBtn.disabled = position === 0;
        nextBtn.disabled = position >= maxPosition;
      }
    }

    // Initial state
    updateButtonState();
  });
</script>

<Layout
  title={title}
  ogImage={imgUrl}
  description={description}
  articleDate={postDate}
>
  <main class="h-full min-w-full flex-grow space-y-6">
    <div class="mb-0 border-b border-slate-900 pb-4 dark:border-slate-100">
      <h1 class="text-2xl font-semibold tracking-wide">
        {title}
      </h1>
    </div>
    <div
      class="flex w-full flex-col items-center justify-between gap-4 md:flex-row"
    >
      <div class="flex flex-row items-center gap-4">
        <time
          datetime={datetime}
          class="whitespace-nowrap text-sm text-gray-600 md:text-base"
          >{postDate}</time
        >
        <span class="whitespace-nowrap opacity-40">
          {remarkPluginFrontmatter.minutesRead}
        </span>
      </div>
      <div class="tag-carousel justify-center md:justify-end">
        <button
          class="btn btn-sm carousel-btn prev-btn shrink-0"
          aria-label="Previous tags"
        >
          <!-- Rotate because back icon is off center -->
          <Icon
            name="material-symbols:arrow-forward-ios"
            size="1rem"
            class="rotate-180"
          />
        </button>
        <div class="tag-container-wrapper min-w-0 flex-1">
          <ul class="tag-container">
            {
              tags.map((tag: string) => (
                <li class="label label-sm tag-item whitespace-nowrap">{tag}</li>
              ))
            }
          </ul>
        </div>
        <button
          class="btn btn-sm carousel-btn next-btn shrink-0"
          aria-label="Next tags"
        >
          <Icon name="material-symbols:arrow-forward-ios" size="1rem" />
        </button>
      </div>
    </div>

    <div
      class="prose-a:underline-blue-500 prose-a:visited:underline-blue-700 prose min-w-full text-slate-900 marker:text-slate-900 prose-h2:border-b prose-h2:border-slate-900 prose-h2:text-slate-900 prose-h3:text-slate-900 prose-h4:text-slate-900 prose-a:text-slate-900 prose-a:underline prose-strong:text-slate-900 prose-ol:pl-12 prose-ul:pl-11 prose-img:border dark:text-slate-100 dark:marker:text-slate-100 dark:prose-h2:border-slate-100 dark:prose-h2:text-slate-100 dark:prose-h3:text-slate-100 dark:prose-h4:text-slate-100 dark:prose-a:text-slate-100 dark:prose-strong:text-slate-100"
    >
      <slot />
    </div>
  </main>
</Layout>

<style>
  .tag-carousel {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    width: 100%;
  }

  .tag-container-wrapper {
    position: relative;
    overflow: hidden;
    width: 100%;
    max-width: 450px;
  }

  .tag-container {
    display: flex;
    transition: transform 0.3s ease;
    gap: 0.5rem;
    width: fit-content;
  }
</style>
